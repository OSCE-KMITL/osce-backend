# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  created_at: DateTime!
  email: String!
  id: String!
  is_advisor: Advisor
  is_company: CompanyPerson
  is_student: Student
  password: String!
  profile_image: String
  role: Role!
  status: String!
  updated_at: DateTime!
}

type Advisor {
  account: Account!
  advisor_assessment: [AdvisorAssessment]!
  advisor_id: String!
  announcements: [Announcement]!
  created_at: DateTime!
  curriculum: Curriculum
  department: Department
  faculty: Faculty
  is_committee: Boolean!
  last_name: String!
  last_name_en: String!
  name: String!
  name_en: String!
  name_prefix: String
  students: [Student]!
  updated_at: DateTime!
}

input AdvisorAccountInput {
  email: String!
  is_committee: String!
  last_name: String!
  name: String!
  name_prefix: String!
}

type AdvisorAssessment {
  advisor: Advisor
  assessment_obj: JSONObject!
  created_at: DateTime!
  id: String!
  score: Float!
  student: Student
  updated_at: DateTime!
}

type Announcement {
  advisor_id: Advisor
  createdAt: DateTime!
  description: String!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input AnnouncementInput {
  desc: String!
  title: String!
}

input AssignJobInput {
  job_id: String!
  student_id: String!
}

type AuthData {
  created_at: DateTime!
  email: String!
  id: String!
  is_advisor: Advisor
  is_company: CompanyPerson
  is_student: Student
  password: String!
  profile_image: String
  role: Role!
  status: String!
  token: String!
  updated_at: DateTime!
}

input CommitteeCoopRegisterArgs {
  coop_status: String
  curriculum_id: String
  curriculum_name_en: String
  curriculum_name_th: String
  department_id: String
  department_name_en: String
  department_name_th: String
  faculty_id: String
  faculty_name_en: String
  faculty_name_th: String
  lastname_th: String
  level_id: String
  name_prefix: String
  name_th: String
  student_id: String!
}

type Company {
  address: String!
  business_type: String!
  company_assessment: [CompanyAssessment]!
  company_persons: [CompanyPerson]!
  created_at: DateTime!
  district: String!
  id: String!
  job: [Job]!
  name_eng: String!
  name_th: String!
  phone_number: String!
  postal_code: String!
  province: String!
  sub_district: String!
  updated_at: DateTime!
  website_url: String!
}

type CompanyAssessment {
  assessment_obj: JSONObject!
  company: Company
  created_at: DateTime!
  id: String!
  improvement: String
  score: Float!
  strength: String
  student: Student
  updated_at: DateTime!
}

input CompanyInput {
  address: String!
  business_type: String!
  district: String!
  name_eng: String!
  name_th: String!
  phone_number: String!
  postal_code: String!
  province: String!
  sub_district: String!
  website_url: String!
}

type CompanyPerson {
  account: Account!
  company_id: Company
  company_person_id: String!
  created_at: DateTime!
  email: String!
  full_name: String!
  is_coordinator: Boolean!
  job_title: String!
  phone_number: String!
  updated_at: DateTime!
}

input CompanyPersonInput {
  company_id: String!
  email: String!
  full_name: String!
  is_coordinator: Boolean!
  job_title: String!
  password: String!
  phone_number: String!
}

input CoopRegisterArgs {
  address: String
  birth_date: String
  citizen_id: String
  coop_status: String
  curriculum_id: String
  curriculum_name_en: String
  curriculum_name_th: String
  department_id: String
  department_name_en: String
  department_name_th: String
  driver_license: Boolean
  emer_lastname: String
  emer_name: String
  emer_relation: String
  emer_tel: String
  faculty_id: String
  faculty_name_en: String
  faculty_name_th: String
  gender: String
  gpa: String
  height: String
  lastname_th: String
  level_id: String
  military_status: Boolean
  name_prefix: String
  name_th: String
  phone_number: String
  religion: String
  student_id: String!
  weight: String
}

"""status of coop """
enum CoopStatus {
  APPLYING
  DEFAULT
  PASSED
  REJECTED
  SAVED
}

input CreateAdvisorAssessmentInput {
  advisor_id: String!
  assessment_obj: JSONObject!
  score: Float!
  student_id: String!
}

input CreateCompanyAssessmentInput {
  assessment_obj: JSONObject!
  company_id: String!
  improvement: String
  score: Float!
  strength: String
  student_id: String!
}

type Curriculum {
  advisors: [Advisor]!
  curriculum_id: String!
  curriculum_name_en: String!
  curriculum_name_th: String!
  dept_id: String!
  faculty_id: String!
  id: ID!
  level_id: String!
  students: [Student]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Department {
  advisors: [Advisor]!
  department_id: String!
  department_name_en: String!
  department_name_th: String!
  faculty_id: String!
  id: ID!
  students: [Student]!
}

input EditJobStateInput {
  student_apply_job_id: String!
}

input EditScoreInput {
  score_advisor: Float!
  score_company: Float!
  score_presentation: Float!
  student_id: String!
}

type Faculty {
  advisors: [Advisor]!
  faculty_id: ID!
  faculty_name_en: String!
  faculty_name_th: String!
  students: [Student]!
}

type FileUpload {
  createdAt: DateTime!
  current_name: String
  id: String!
  job_id: Job!
  original_name: String
  updatedAt: DateTime!
  url: String
}

input GetWithKeyInput {
  target: String
  value: String
}

type Job {
  company_id: Company
  compensation: String
  coordinator_email: String
  coordinator_job_title: String
  coordinator_name: String
  coordinator_phone_number: String
  created_at: DateTime!
  file_upload: [FileUpload]!
  id: String!
  internship_period: String
  job_title: String
  limit: String
  nature_of_work: String
  project_topic: String
  required_major: String
  required_skills: String
  student_apply_job: [StudentApplyJob]!
  students: [Student]!
  supervisor_email: String
  supervisor_job_title: String
  supervisor_name: String
  supervisor_phone_number: String
  updated_at: DateTime!
  welfare: String
  work_period: String
}

input JobInputByCommittee {
  company_id: String
  compensation: String
  coordinator_email: String
  coordinator_job_title: String
  coordinator_name: String
  coordinator_phone_number: String
  internship_period: String
  job_title: String
  limit: String
  nature_of_work: String
  project_topic: String
  required_major: String
  required_skills: String
  supervisor_email: String
  supervisor_job_title: String
  supervisor_name: String
  supervisor_phone_number: String
  welfare: String
  work_period: String
}

input JobInputByCompany {
  compensation: String
  coordinator_email: String
  coordinator_job_title: String
  coordinator_name: String
  coordinator_phone_number: String
  internship_period: String
  job_title: String
  limit: String
  nature_of_work: String
  project_topic: String
  required_major: String
  required_skills: String
  supervisor_email: String
  supervisor_job_title: String
  supervisor_name: String
  supervisor_phone_number: String
  welfare: String
  work_period: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LanguageAbility {
  level: String!
  name: String!
}

type Mutation {
  applyJob(apply_info: StudentApplyJobInput!): Student
  cancelApply(cancel_apply_info: StudentApplyJobInput!): StudentApplyJob
  committeeAddRegisterStudent(committee_register_coop_input: CommitteeCoopRegisterArgs!): Student
  committeeApproveJob(committee_approve_info: EditJobStateInput!): StudentApplyJob
  committeeAssignJob(committee_assignjob_info: AssignJobInput!): StudentApplyJob
  CommitteeAssignStudent(advisor_id: String!, student_list: [String]!): Advisor
  committeeChangeCoopStatus(status: String!, student_id: String!): Student!
  committeeDisapproveJob(committee_disapprove_info: EditJobStateInput!): StudentApplyJob
  companyApproveJob(company_approve_info: EditJobStateInput!): StudentApplyJob
  companyDisapproveJob(company_disapprove_info: EditJobStateInput!): StudentApplyJob
  createAdvisorAssessment(advisor_assessment_info: CreateAdvisorAssessmentInput!): Student
  createAnnouncement(announcement_info: AnnouncementInput!): Announcement
  createCompany(company_info: CompanyInput!): Company
  createCompanyAssessment(company_assessment_info: CreateCompanyAssessmentInput!): Student
  createJobByCommittee(file: Upload!, job_info: JobInputByCommittee!): Job
  createJobByCommitteeNoFile(job_info: JobInputByCommittee!): Job
  createJobByCompany(file: Upload!, job_info: JobInputByCompany!): Job
  createJobByCompanyNoFile(job_info: JobInputByCompany!): Job
  createProgressReport(progress_report_arg: ProgressReportInput!): ProgressReport
  deleteAdvisorAccount(id: String!): Account
  deleteAnnouncement(announcement_id: String!): Announcement
  deleteCompany(delete_by_id: String!): Company
  deleteCompanyPersonAccount(id: String!): Account
  deleteJob(job_id: String!): Job
  deleteProgressReport(report_id: String!): ProgressReport
  registerAdvisor(advisorAccountInfo: AdvisorAccountInput!): Account!
  registerCompanyPerson(CompanyPersonAccountInfo: CompanyPersonInput!): Account!
  setScoreStudent(set_score_info: EditScoreInput!): Student
  signIn(email: String!, password: String!): AuthData
  studentAcceptJob(student_accept_info: EditJobStateInput!): StudentApplyJob
  studentDeleteById(student_id: String!): Student
  studentRegister(student_register_input: StudentRegisterInput!): Account!
  studentRegisterCoop(language_abilities: [LanguageAbility!], register_coop_input: CoopRegisterArgs!, skills: [Skill!], transcript_file: Upload): Student
  studentRejectJob(student_reject_info: EditJobStateInput!): StudentApplyJob
  undoCommitteeApproveJob(undo_committee_approve_info: EditJobStateInput!): StudentApplyJob
  undoCommitteeDisapproveJob(undo_committee_disapprove_info: EditJobStateInput!): StudentApplyJob
  undoCompanyApproveJob(undo_company_approve_info: EditJobStateInput!): StudentApplyJob
  undoCompanyDisapproveJob(undo_company_disapprove_info: EditJobStateInput!): StudentApplyJob
  undoStudentAcceptJob(undo_student_accept_info: EditJobStateInput!): StudentApplyJob
  undoStudentRejectJob(undo_student_reject_info: EditJobStateInput!): StudentApplyJob
  updateAdvisorAccount(updateInfo: UpdateAdvisorArgs!): Account!
  updateAnnouncement(update_input: UpdateAnnouncementInput!): Announcement
  updateCompany(update_input: UpdateCompanyInput!): Company
  updateCompanyPerson(update_input: UpdateCompanyPersonInput!): CompanyPerson
  updateJob(update_input: UpdateJobInput!): Job
  uploadFile(file: Upload!): FileUpload
}

type ProgressReport {
  advisement_score: Float!
  commute_score: Float!
  createdAt: DateTime!
  current_res: String!
  mentor_lastname: String
  mentor_name: String
  mentor_position: String
  other_suggest: String!
  progress_report_id: String!
  report_no: Float!
  student_id: Student!
  updatedAt: DateTime!
  work_score: Float!
}

input ProgressReportInput {
  advisement_score: Float!
  commute_score: Float!
  current_res: String!
  mentor_lastname: String
  mentor_name: String
  mentor_position: String
  other_suggest: String!
  work_score: Float!
}

type Query {
  getAccount(account_id: String!): Account
  getAccounts: [Account]!
  getAdvisor(id: String!): Advisor
  getAdvisorAccount(advisor_id: String!): Account
  getAdvisorAccounts: [Account]!
  getAllAdvisorAssessment: [AdvisorAssessment]!
  getAllCompanies: [Company]!
  getAllCompanyAssessment: [CompanyAssessment]!
  getAllJob: [Job]!
  getAllStudentApplyJob: [StudentApplyJob]!
  getAnnouncement(with_key: GetWithKeyInput!): Announcement
  getAnnouncements: [Announcement]!
  getCompanyById(company_id: String!): Company
  getCompanyByKey(with_key: GetWithKeyInput!): Company
  getCompanyPersonAccount(account_id: String!): Account
  getCompanyPersonAccounts: [Account]!
  getJobById(job_id: String!): Job
  getMe: Account
  getProgressReport(id: String!): ProgressReport
  getProgressReports: [ProgressReport]!
  getStudent(student_id: String!): Student
  getStudents: [Student]!
  getStudentsApply: [Student]!
  getStudentsByDepartment(department_id: String!): [Student!]
}

"""type of user"""
enum Role {
  ADVISOR
  COMMITTEE
  COMPANY
  STUDENT
  SUPER_ADMIN
}

input Skill {
  level: String!
  skill_name: String!
}

type Student {
  account: Account!
  address: String
  advisor: Advisor
  advisor_assessment: AdvisorAssessment
  birth_date: String
  citizen_id: String
  company_assessment: CompanyAssessment
  coop_status: CoopStatus!
  created_at: DateTime!
  curriculum: Curriculum
  department: Department
  driver_license: Boolean
  emer_lastname: String
  emer_name: String
  emer_relation: String
  emer_tel: String
  faculty: Faculty
  gender: String
  gpa: String
  height: String
  job: Job
  language_abilities: [StudentLanguageAbility]!
  lastname_eng: String!
  lastname_th: String
  military_status: Boolean
  name_eng: String!
  name_prefix: String
  name_th: String
  phone_number: String
  progress_report: [ProgressReport]!
  religion: String
  score_from_advisor: Float
  score_from_company: Float
  score_from_presentation: Float
  skills: [StudentSkills]!
  student_apply_job: [StudentApplyJob]!
  student_id: ID!
  transcript: TranscriptFileUpload
  updated_at: DateTime!
  weight: String
}

type StudentApplyJob {
  created_at: DateTime!
  id: String!
  job: Job
  job_status: String
  student: Student
  updated_at: DateTime!
}

input StudentApplyJobInput {
  job_id: String!
}

type StudentLanguageAbility {
  id: ID!
  level: String!
  name: String!
}

input StudentRegisterInput {
  email: String!
  lastname_eng: String!
  name_eng: String!
  password: String!
  student_id: String!
}

type StudentSkills {
  id: ID!
  level: String!
  skill_name: String!
}

type TranscriptFileUpload {
  created_at: DateTime!
  current_name: String
  id: String!
  original_name: String
  student_id: Student!
  updated_at: DateTime!
  url: String
}

input UpdateAdvisorArgs {
  account_id: String!
  advisor_status: String!
  is_committee: Boolean!
}

input UpdateAnnouncementInput {
  desc: String!
  id: String!
  title: String!
}

input UpdateCompanyInput {
  address: String!
  business_type: String!
  district: String!
  id: String!
  name_eng: String!
  name_th: String!
  phone_number: String!
  postal_code: String!
  province: String!
  sub_district: String!
  website_url: String!
}

input UpdateCompanyPersonInput {
  email: String!
  full_name: String!
  id: String
  is_coordinator: Boolean!
  job_title: String!
  phone_number: String!
}

input UpdateJobInput {
  compensation: String
  coordinator_email: String
  coordinator_job_title: String
  coordinator_name: String
  coordinator_phone_number: String
  id: String!
  internship_period: String
  job_title: String
  limit: String
  nature_of_work: String
  project_topic: String
  required_major: String
  required_skills: String
  supervisor_email: String
  supervisor_job_title: String
  supervisor_name: String
  supervisor_phone_number: String
  welfare: String
  work_period: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
